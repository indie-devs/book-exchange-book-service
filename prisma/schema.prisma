generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  NEW
  VERIFIED
  BANNED
  DISABLED
  PUBLISHED
}

model Book {
  id                       Int                   @id @default(autoincrement())
  status                   BookStatus            @default(NEW)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  title                    String
  isAvailableForExchanging Boolean               @default(true)
  isActive                 Boolean               @default(true)
  description              String
  numberOfPages            Int
  coverImage               String
  reprintTimes             Int
  publishDate              DateTime
  publisher                String
  language                 String
  author                   Author?               @relation(fields: [authorId], references: [id])
  authorId                 Int?
  categories               Category[]
  exchangeSessions         BookExchangeSession[]
}

model BookExchangeSession {
  id                        String               @id @default(uuid())
  bookId                    Int
  book                      Book                 @relation(fields: [bookId], references: [id])
  exchangeDate              DateTime
  dueDate                   DateTime
  requesterId               String
  note                      String?
  reviewId                  String?
  backwardExchangeSessionId String?              @unique
  backwardExchangeSession   BookExchangeSession? @relation("ExchangeCircularSession", fields: [backwardExchangeSessionId], references: [id])
  initialExchangeSession    BookExchangeSession? @relation("ExchangeCircularSession")
}

model Author {
  id           Int       @id @default(autoincrement())
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  name         String
  dob          DateTime?
  bio          String?
  authorAvatar String?
  books        Book[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  coverImage  String?
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  isActive    Boolean  @default(true)
  books       Book[]
}
